"""
Subtitle embedding with FFmpeg (multiple strategies)
"""

import os
import time
import subprocess
from pathlib import Path
from typing import Optional, Dict

from core.utils.logging import get_logger

logger = get_logger(__name__)


def embed_subtitle_in_video(video_path: Path, subtitle_path: Path, output_path: Path, style_options: Dict = None) -> bool:
    if not subtitle_path.exists() or not video_path.exists():
        return False
    style = {"font_size": 24, "font_color": "white", "outline_color": "black", "outline_width": 2}
    if style_options:
        style.update(style_options)
    methods = [
        _method_ass,
        _method_subtitles,
        _method_basic,
    ]
    for m in methods:
        try:
            if m(video_path, subtitle_path, output_path, style):
                return output_path.exists() and output_path.stat().st_size > 1024
        except Exception as e:
            logger.warning(f"Embed method failed: {e}")
        time.sleep(0.5)
    return False


def _method_subtitles(video: Path, sub: Path, out: Path, style: Dict) -> bool:
    safe = str(sub).replace("\\", "/").replace(":", "\\:")
    cmd = [
        "ffmpeg","-y","-hide_banner","-loglevel","error",
        "-i", str(video),
        "-vf", f"subtitles='{safe}'",
        "-c:a","copy","-c:v","libx264", str(out)
    ]
    subprocess.run(cmd, check=True)
    return True


def _method_ass(video: Path, sub: Path, out: Path, style: Dict) -> bool:
    ass = sub.with_suffix(".ass")
    if sub.suffix.lower() == ".srt":
        if not convert_srt_to_ass(sub, ass, style):
            return False
    safe = str(ass).replace("\\", "\\\\").replace(":", "\\:")
    cmd = [
        "ffmpeg","-y","-hide_banner","-loglevel","error",
        "-i", str(video),
        "-vf", f"ass='{safe}'",
        "-c:a","copy","-c:v","libx264", str(out)
    ]
    subprocess.run(cmd, check=True)
    if ass.exists():
        try: ass.unlink()
        except: pass
    return True


def _method_basic(video: Path, sub: Path, out: Path, style: Dict) -> bool:
    cmd = [
        "ffmpeg","-y",
        "-i", str(video),
        "-vf", f"subtitles='{str(sub)}'",
        "-map","0:v","-map","0:a","-c:a","copy", str(out)
    ]
    subprocess.run(cmd, check=True)
    return True


def convert_srt_to_ass(srt_path: Path, ass_path: Path, style: Dict) -> bool:
    try:
        content = srt_path.read_text(encoding="utf-8", errors="ignore")
        segments = _parse_srt(content)
        ass_content = _build_ass(segments, style)
        ass_path.write_text(ass_content, encoding="utf-8")
        return True
    except Exception as e:
        logger.error(f"SRT->ASS failed: {e}")
        return False


def _parse_srt(content: str):
    lines = content.strip().splitlines()
    items = []
    i = 0
    while i < len(lines):
        if lines[i].strip().isdigit():
            i += 1
            if i < len(lines) and "-->" in lines[i]:
                times = lines[i].split(" --> ")
                start = _srt_to_seconds(times[0])
                end = _srt_to_seconds(times[1])
                i += 1
                texts = []
                while i < len(lines) and lines[i].strip():
                    texts.append(lines[i].strip())
                    i += 1
                items.append({"start": start, "end": end, "text": "\\N".join(texts)})
        i += 1
    return items


def _srt_to_seconds(t: str) -> float:
    try:
        ts, ms = t.split(',')
        h, m, s = map(int, ts.split(':'))
        return h*3600 + m*60 + s + int(ms)/1000
    except:
        return 0.0


def _build_ass(segments, style: Dict) -> str:
    fontsize = style.get("font_size", 24)
    font_color = style.get("font_color", "FFFFFF")
    outline_color = style.get("outline_color", "000000")
    outline = style.get("outline_width", 2)
    ass_header = f"""[Script Info]
Title: Generated by Video Toolkit
ScriptType: v4.00+
PlayResX: 1920
PlayResY: 1080

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,{fontsize},&H00{font_color},&H000000FF,&H00{outline_color},&H64000000,0,0,0,0,100,100,0,0,1,{outline},0,2,20,20,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""
    lines = []
    for seg in segments:
        lines.append(f"Dialogue: 0,{_to_ass_time(seg['start'])},{_to_ass_time(seg['end'])},Default,,0,0,0,,{seg['text']}")
    return ass_header + "\n".join(lines)


def _to_ass_time(seconds: float) -> str:
    h = int(seconds // 3600)
    m = int((seconds % 3600) // 60)
    s = seconds % 60
    return f"{h:01d}:{m:02d}:{s:05.2f}"
